<prog> -> package id EOL <exec>
<exec> -> <func> <func_n>
<func> -> func id (<params>)<func_types><body>
<func_types> -> (<type> <types_n>)
<func_types> -> eps
<types_n> -> , <type> <types_n>
<types_n> -> eps
<type> -> int 
<type> -> float64
<type> -> string
<params> -> id <type> <params_n>
<params> -> eps
<params_n> -> , id <type> <params_n>
<params_n> -> eps
<func_n> -> EOL <func> <func_n>
<func_n> -> eps
<body> -> { <statement> <statement_n> }
<statement> -> EOL <definition>
<statement> -> EOL <assignment>
<statement> -> EOL <if>
<statement> -> EOL <for>
<statement> -> EOL <call>
<statement> -> EOL <return>
<statement> -> EOL eps
<statement_n> -> <statement> <statement_n>
<statement_n> -> eps
<definition> -> id := <expression>
<assignment> -> <ids> = <expressions> 
<assignment> -> <ids> = <call>
<ids> -> id <ids_n>
<ids_n> -> , id <ids_n> 
<ids_n> -> eps
<expressions> -> <expression> <expression_n>
<expression_n> -> , <expression> <expression_n>
<expression_n> ->  eps
<if> -> if <expression> <body> else <body>
<for> -> for <definition>; <expression> ; <assignment>  <body>
<for> -> for eps ; <expression> ; eps  <body>
<call> -> id(<call_param>)
<call> -> id()
<call_param> -> data_float64 <call_param_n>
<call_param> -> data_int <call_param_n>
<call_param> -> data_string <call_param_n>
<call_param> -> id <call_param_n>
<call_param_n> -> , <call_param>
<call_param_n> -> eps
<return> -> return <expressions>


